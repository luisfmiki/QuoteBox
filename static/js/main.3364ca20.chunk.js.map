{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","quotes","quote","auth","cores","Frase","props","style","className","frase","autor","Frases","state","ordem","cor","mudarOrdem","bind","this","setState","console","log","color","backgroundColor","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,qICGrCC,G,YAAS,CACb,CAACC,MAAO,6LAA8LC,KAAM,sBAC5M,CAACD,MAAM,4IAA4IC,KAAK,oBACxJ,CAACD,MAAM,sDAAsDC,KAAK,wBAClE,CAACD,MAAM,+EAA+EC,KAAK,sBAEvFC,EAAQ,CAAC,MAAO,QAAS,OAAQ,QAAS,UAE1CC,EAAQ,SAACC,GACb,OACE,6BACA,0BAAMC,MAAOD,EAAMC,MAAOC,UAAU,UAAUF,EAAMG,OACpD,uBAAGF,MAAOD,EAAMC,MAAOC,UAAU,SAASF,EAAMI,SAK9CC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXH,MAAOR,EAAO,GAAGC,MACjBQ,MAAOT,EAAO,GAAGE,KACjBU,MAAO,EACPC,IAAKV,EAAM,IAEb,EAAKW,WAAa,EAAKA,WAAWC,KAAhB,gBARN,E,yDAUA,IAAD,OACVC,KAAKC,UAAS,WACZ,OAAG,EAAKN,MAAMC,MAAQ,EACb,CAACA,MAAO,EAAKD,MAAMC,MAAQ,EAAGJ,MAAOR,EAAO,EAAKW,MAAMC,OAAOX,MAAOQ,MAAOT,EAAO,EAAKW,MAAMC,OAAOV,KAAMW,IAAKV,EAAM,EAAKQ,MAAMC,QAEjI,CAACA,MAAO,EAAGJ,MAAOR,EAAO,GAAGC,MAAOQ,MAAOT,EAAO,GAAGE,KAAMW,IAAKV,EAAM,S,+BAOjF,OAFAe,QAAQC,IAAIH,KAAKL,MAAMC,OACvBM,QAAQC,IAAIH,KAAKL,MAAME,KAErB,yBAAKN,UAAU,OACf,kBAAC,EAAD,CAAOD,MAAO,CAACc,MAAOJ,KAAKL,MAAME,KAAML,MAAOQ,KAAKL,MAAMH,MAAOC,MAAOO,KAAKL,MAAMF,QAClF,4BAAQH,MAAO,CAACe,gBAAiBL,KAAKL,MAAME,KAAKN,UAAU,MAAMe,QAASN,KAAKF,YAA/E,kB,GA1BeS,IAAMC,WAwCZC,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QC3CcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.3364ca20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nconst quotes = [\n  {quote: \"I should have no objection to go over the same life from its beginning to the end: requesting only the advantage authors have, of correcting in a second edition, the faults of the first.\", auth: \"-Benjamin Franklin\"}, \n  {quote:\"When we quit thinking primarily about ourselves and our own self-preservation, we undergo a truly heroic transformation of consciousness.\",auth:\"-Joseph Campbell\"}, \n  {quote:\"Our truest life is when we are in our dreams awake.\",auth:\"-Henry David Thoreau\"}, \n  {quote:\"Until quite recently dance in America was the ragged Cinderella of the arts.\",auth:\"-Shana Alexander\"}\n]\nconst cores = [\"red\", \"green\", \"blue\", 'black', 'orange']\n\nconst Frase = (props) => {\n  return (\n    <div>\n    <span style={props.style} className=\"Frases\">{props.frase}</span>\n    <p style={props.style} className=\"Autor\">{props.autor}</p>\n    </div>\n  )\n}\n\nclass Frases extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      frase: quotes[0].quote,\n      autor: quotes[0].auth,\n      ordem: 1,\n      cor: cores[0]\n    }\n    this.mudarOrdem = this.mudarOrdem.bind(this)\n  }\n  mudarOrdem() {\n     this.setState(() => {\n       if(this.state.ordem < 4){\n         return {ordem: this.state.ordem + 1, frase: quotes[this.state.ordem].quote, autor: quotes[this.state.ordem].auth, cor: cores[this.state.ordem]}\n       } else {\n         return {ordem: 1, frase: quotes[0].quote, autor: quotes[0].auth, cor: cores[0]}\n       }\n     })\n  }\n  render() {\n    console.log(this.state.ordem)\n    console.log(this.state.cor)\n    return (\n      <div className=\"div\">\n      <Frase style={{color: this.state.cor}} frase={this.state.frase} autor={this.state.autor} />\n      <button style={{backgroundColor: this.state.cor}}className=\"btn\" onClick={this.mudarOrdem}>New Quote</button>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Frases />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}